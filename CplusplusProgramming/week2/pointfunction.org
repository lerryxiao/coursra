* 函数指针
** 定义
  将函数的地址执行函数的起始地址
  #+BEGIN_SRC 
      返回值类型 (*指针变量名) (参数类型1, 参数类型2，......)
    e.g
      int (*pf)(int, char)

  #+END_SRC

** demo
    #+BEGIN_SRC C++
    #include <stio.h>
    void PrintMin(int a, intb)
    {
        if(a < b)
        {
             printf("%d", a);
        }
        else
        {
            printf("%d", b);
        }
    }

    int main()
    {
        void (*pf)(int, int);
        int x = 4, y = 5;
        pf = PrintMin;
        pf(x, y);
        return 0;
    }
    #+END_SRC

   # +RESULTS:
   : 4

* 命令行参数
   #+BEGIN_SRC 
       int main(int argc, char *argv[]);
   #+END_SRC
   argc : 参数的个数
   
   argv : char * 数组，即字符串数组

* 位运算
  1. 按位与 ”&“
     2 个进制数值进行按位与，都为1 时才为1，否则为0.
     用途： 某些位清零切其他位保持不变。
   
  2. 按位或 “|”
     按位或 两个相应的二进制位进行或操作，相应的位只要有一个为1，该位的结果值为1
     用途： 将某些变量中的某些位置为1且其他位不变。
  3. 按位异或 “^”
     按位异或 若参加运算的两个二进制位值相同则为0，否则为1
     用途：将某些变量中的某位取反，且保留其他位不变。
     异或运算特点： 如果 a^b = c, 那么就有 c^b = a  以及 c^a =b
  4. 按位非“~”
     按位取反
  5.左移运算符 "<<"
    表达式：
    #+BEGIN_SRC 
        a << b
    #+END_SRC
     的值是：将 a 各二进制位全部左移 b 位后得到的值。左移时，高位丢弃，低位补0。 a  的值不因预算而改变。
     e.g :
     #+BEGIN_SRC 
         9 << 4
     #+END_SRC
     得到 1001 0000 即 144
     
     实际上，左移1位，就等于是乘以2，左移n位，就等于 是乘以2 的 n 次方
     
   5. 右移运算符 ">>"
      表达式：
      #+BEGIN_SRC 
          a >> b
      #+END_SRC
      的值：将a各二进位全部右移b位后得到的值。右移时，移出最右边 的位就被丢弃。 a 的值不因运算而改变。
      
      对于有符号数，如long,int,short,char类型变量，在右移时，符号 位(即最高位)将一起移动，并且大多数C/C++编译器规定，如果原符 号位为1，则右移时高位就补充1，原符号位为0，则右移时高位就补充 0。

      实际上，右移n位，就相当于左操作数除以2的次方，并且将结果往小里取整。


*  const 和引用
** 引用
** const
 
      